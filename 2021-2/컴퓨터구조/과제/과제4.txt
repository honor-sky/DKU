1-1. #70은 상수 70을 R2에 넣으라는 명령어이고, @R1은 R1이 가르키는 값을 주소로 하여 메모리를 찾아가면 된다. 그래서 명령어 300은 R2에 70을(8bit 2진수로 표현하면 01000110)  넣고, 명령어303에서는 R2에서 메모리에서 주소가 70인 곳에서 가르키는 값을 빼준다.
     따라서 303 명령어 수행 후엔 R2에 70이 들어가게 되고 SUB 명령어 즉, 뺄셈의 경우 70 + (-70) 으로 해야 하고 따라서 70의 의 보수를 구해 -70을 구하면 10111010 이다.
      70 : 01000110
    (-70): 10111010 
+--------------------------
          100000000     이므로 R2에는 100000000 이라는 값(10진수로는 0)이 들어가게 된다.

1-2. 이때 1 carr가 발생했고, 0이 되었기 때문에 zero 플래그는 1이 된다. 음수로 바뀐 것은 아니기 때문에 sign 플래그는 0이고, 범위 내의 결과값이 나와 오버플로우는 발생하지 않았기 때문에 overflow 플래그도 0이다.

1-3. $가 붙어있는 operand는 pc에 들어있는 값에 -9를 더해준 주소로 하여 메모리를 찾아간다. 이 경우 JZ opcode가 있는데 이는 R2의 값이 0이면 참이 되어 방금 말한 주소로 점프하게 된다. 
      1-1를 통해 0이라는 결과가 나왔기 때문에 조건을 만족해 분기할 수 있다. 이때 pc에는 다음 수행할 명령어의 주소가 들어가 있다. 다음 수행할 명령어의 주소는 명령어 하나당 크기 3byte 이므로 309번지가 될 것이고, 309 + (-9)를 하면 300이므로 300번지 주소를 갖는
      첫번째로 수행했었떤 명령어로 분기한다.

2-1. 1GHz 이므로 클럭 주기 = 클럭 속도(rate) = 10^9
      speedup은 파이프라인 적용 전 처리 시간/파이프라인 적용 후 처리 시간 으로 구할 수 있다. (5 x 1/10^9 x 10^7) / (5+10^7 -1) x 1/10^9 = 5x10^7 / 4+10^7 이다.

2-2. MIPS는 1초당 처리하는 명령어의 개수를 million단위로 나타낸 것이므로 
      [이 프로세서는 파이프라인이 적용되어 있어 한 개의 클럭 사이클 당 한 개의 명령어 처리가 되는 셈이다. 1GHz로서 clock cycle time은 10^-9이다. 
       따라서 처리율은 1 instruction / clock cycle time= 1/10^-9 이고 단위는 million(= 10^6)이므로 처리율은 10^3=1000이 된다. ]

      프로그램에서 처리할 명령어 10^7를 1로 생각하면 된다. 
      따라서 non-pipeline에서는 10^9/5 이고, pipeline에서는 10^9/(5+10^7-1)x10^7 = 10^2 / (4+10^7) 이다.
      [또한 non-pipeline에서는 5 개의 클럭 사이클 당 한 개의 명령어 처리가 되는 셈이다. 따라서 처리율은 1 instruction / 5clock cycle = 1 / 5x10^-9 = 10^9/5 이고 단위를 million으로 변환하면
       1000/5 =200 이다. ]

2-3. 먼저 resource harzard가 있다. resource harzard는 메모리가 하나이기에 data 와 instruction을 fetch 해오지 못하여 발생하는 문제이다. 하지만 data 와 instruction에 대한 캐시를 따로 두면서 이 문제를 해결할 수도 있다.
      또한 data harzard는 이전 명령어에서 수행 결과가 저장되지 않았는데 다음 명령어에서 그 결과를 fetch해오려고 할 때 문제가 발생하면서 결국 두번째 명령어의 데이터 fetch가 밀리고 그만큼 지연되는 것이다.
      마지막으로 control harzard는 분기 명령어에서 발생하는 문제인데 예를 들어 첫번째 명령어에서 수행된 결과로 두번째 명령어에서 조건 비교등을 통해 분기를 한다고 할 때
      첫번째 명령어의 수행이 완료될 때까지 분기 또한 밀리는 현상이다. 

3. 정답: 3,5,7,8  풀이: RICS에서는 ARM 프로세서에서 많이 사용되는 구조로 간단하고 적은 명령어를 사용하는 특징이 있다. 또한 많은 수의 레지스터들을 사용하며 addressing 모드 또한 간단하다.
                            마이크프로그램 컨트롤 유닛을 사용하고, 컨트롤 유닛이 메모리 공간을 차지하는 것은 CISC이고, 복잡하고 다양한 크기의 명령어를 사용하며 x86 프로세스에서 많이 사용되는 것또한 CISC이다.
                            산술연산 기능에 load/store 가 통합된 것 또한 CISC의 특징이다. [ 마이크로 프로세서는 CISC, Hardwired 프로세서는 RIS이다. ]

4. 정답: 1,2,5   풀이: SMP에서 각 프로세스서들은 통홥된 os를 사용하고, 메모리 접근시간은 위치와 관계없이 거의 동일하므로 3,4는 오답이다.

5. 1) 1byte, 0011 1111
   2) 1 과 마지막에 \0을 넣어야 하므로 2byte, 0011 1111 1111 0011
   3) 4byte, 0000 0001 0000 0000 0000 0000 0000 0000
   4) float 실수형의 경우 4byte, 1.0을 이진법으로 바꾸면 1이고 정수부 1은 8bit bias으로 나타냈을 때 01111111이다. 양수이므로 sign bit는 0으로 하고 오른쪽 나머지는 0으로 채워주면 
      0011 1111 1000 0000 0000 0000 0000 0000 이다.