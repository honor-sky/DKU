TCP Flow control & 혼잡제어
 Flow control 
 => 흐름제어, 호스트끼리의 문제
 =>수신 측이 처리 불가 상황 시, 헤더에 남은 버퍼 용량을 함께 보내면 송신측이 패킷 전송 조절
              
 혼잡 제어
 => 네트워크 상의 문제
 => 송신 측에서 보낼 패킷 수량 제어
  혼잡제어를 안 했을 경우?
   - 전송 했는데 ack 안 오는 등 timeout 되면 패킷 재전송
   - TCP는 계속 RTT 계산하고 손실 늘어남
   - 일정 시간 지나면 포기하고 재연결
혼잡제어 방법
 - slow start: 시작과 오류 발생 시, 1로 시작하고 점점 배수로 올라감    * 윈도우 사이즈<=스레드(패킷 전송의 지연이 문제되는 시점) -> slow start
 - congestion avoidance(CA) : 1씩 올라가
                       

TCP 알고리즘에 따라 혼잡제어 방식이 다르다

 - TCP Tahoe : slow start 하다가 타임아웃 된 순간의 윈도우 사이즈의 1/2 만큼 증가하면 CA 방식으로 1개씩 올라감
 
    slow start가 시작되는 경우
     1) 타임아웃
     2) fast retransmit: 3개의 중복 ack를 받았을 때
    => 두 경우의 혼잡제어 처리 방식이 동일한게 문제점

 - TCP Reno : 1) 타임아웃: slow start 하다가 타임아웃 된 순간의 윈도우 사이즈의 1/2 만큼 증가하면 CA 방식으로 1개씩 올라감
                  2) fast retransmit : 그 순간 윈도우 사이즈에서 1/2로 줄이고 CA 방식을 1씩 증가(중복되지 안는 ack가 도달할 때까지 유지) =>  Fast Recovery 방식

 - TCP NewReno(연속 에러 발생 시) : 윈도우 사이즈가 1->1/2->1/4->1/8 로 급격하게 줄어듬
                                               연속적인 손실 에러를 하나의 문젤 간주해 해결하는 방식


API(Application Programming Interface) : 응용프로그램에서 사용할 수 있도록 운영체제나 프로그래밍 언어가 제공하는 기능을 
제어할 수 있게 만든 인터페이스

주로 파일제어, 창 제어, 화상처리, 문자 제어 등을 위한 인터페이스르 제공

혼잡제어 기능을 이용하여 이러한 API를 잘 구성하는 것이 관건!